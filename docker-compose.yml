version: '3.8'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    volumes:
      - zookeeper_data:/var/lib/zookeeper
    networks:
      - kafka_network

  kafka:
    image: confluentinc/cp-kafka:6.2.1
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CLUSTER_ID: ezzAhWB7QeyhfVJ9rEE3Yd
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - kafka_network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  order_service:
    build:
      context: ./choreography/order/
      dockerfile: Dockerfile
    container_name: order_service
    environment:
      SPRING_DATASOURCE_URL: "jdbc:h2:mem:orderdb"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
    volumes:
      - ./choreography/order/target:/app/target
    ports:
      - "8080:8080"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka_network

  payment_service:
    build:
      context: ./choreography/payment/
      dockerfile: Dockerfile
    container_name: payment_service
    environment:
      SPRING_DATASOURCE_URL: "jdbc:h2:mem:paymentdb"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
    volumes:
      - ./choreography/payment/target:/app/target
    ports:
      - "8081:8081"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka_network

  delivery_service:
    build:
      context: ./choreography/delivery/
      dockerfile: Dockerfile
    container_name: delivery_service
    environment:
      SPRING_DATASOURCE_URL: "jdbc:h2:mem:deliverydb"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
    volumes:
      - ./choreography/delivery/target:/app/target
    ports:
      - "8082:8082"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka_network

volumes:
  zookeeper_data:
    external: false
  kafka_data:
    external: false

networks:
  kafka_network:
    driver: bridge
